name: Application CI/CD

on:
  push:
    branches:
      - main
      - dev
    # Only trigger if app code changes, ignore Terraform and docs
    paths-ignore:
      - 'tf-infra/**'
      - '**/*.md'
      - 'docs/**'
      - 'CHANGELOG.md'
      - 'RUNBOOK.md'
      - 'ARCHITECTURE.md'
      - 'DEPLOYMENT.md'
      - 'CONTRIBUTING.md'
      - 'SECURITY.md'
      
env:
  PROJECT_NAME: "uptime-monitor"
  AWS_REGION: "us-east-1"

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:mypassword@localhost:5432/test_db
      SECRET_KEY: test-secret
      DEBUG: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Linter
        run: flake8 .

      - name: Run Tests
        run: pytest -v
      
      - name: Run Trivy vulnerability scanner (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'secret'
          format: 'table'
          exit-code: '1'

  docker-build-push:
    name: Docker Build & Push
    needs: lint-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
    env:
      ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v9n7w5d9
          REPOSITORY: uptimemonitor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image for $ENVIRONMENT..."
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ env.ENVIRONMENT }}-latest
      
      - name: Run Trivy vulnerability scanner (Docker Image)
        uses: aquasecurity/trivy-action@master
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v9n7w5d9
          REPOSITORY: uptimemonitor
          IMAGE_TAG: ${{ github.sha }}
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy image results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Run Trivy vulnerability scanner (Table Output)
        uses: aquasecurity/trivy-action@master
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v9n7w5d9
          REPOSITORY: uptimemonitor
          IMAGE_TAG: ${{ github.sha }}
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v9n7w5d9
          REPOSITORY: uptimemonitor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ env.ENVIRONMENT }}-latest

  deploy-to-ecs:
    name: Deploy to ECS
    needs: docker-build-push
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'staging' }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to ECS
        run: |
          echo "Deploying $ENVIRONMENT environment..."
          aws ecs update-service \
            --cluster $ENVIRONMENT-uptimemonitor-cluster \
            --service $ENVIRONMENT-uptimemonitor-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
          
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ENVIRONMENT-uptimemonitor-cluster \
            --service $ENVIRONMENT-uptimemonitor-service \
            --region ${{ secrets.AWS_REGION }}
          
          echo "âœ… Deployment successful!"