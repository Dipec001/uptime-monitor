"""
Django settings for uptimemonitor project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
import dj_database_url
from celery.schedules import crontab
import botocore.config

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", default="your secret key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", default="False").lower() == "true"

# ALLOWED_HOSTS = [
#     "localhost",
#     "127.0.0.1",
#     "web",  # internal Docker hostname
#     "172.30.112.1",  # Docker for Windows internal host
# ]

ALLOWED_HOSTS = ["*"]  # for testing only, allow all hosts

CORS_ALLOWED_ORIGINS = [
    "https://alivechecks.com",
    "https://www.alivechecks.com",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Alternative: If you want to allow all subdomains
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://.*\.alivechecks\.com$",
# ]

# Allow credentials (cookies, authorization headers)
CORS_ALLOW_CREDENTIALS = True

# Allow these HTTP methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow these headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# How long to cache preflight requests (in seconds)
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

INSTALLED_APPS = [
    'django_prometheus',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'monitor',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_yasg',
    'django_celery_beat',

]

# Social Auth Client IDs (for token verification)
GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID')
GITHUB_OAUTH_CLIENT_ID = os.getenv('GITHUB_OAUTH_CLIENT_ID')
GITHUB_OAUTH_CLIENT_SECRET = os.getenv('GITHUB_OAUTH_CLIENT_SECRET')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "uptimemonitor.middleware.Track5xxMiddleware",
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = "uptimemonitor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "uptimemonitor.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django_prometheus.db.backends.postgresql',
#         'NAME': os.getenv('POSTGRES_DB', 'test_db'),
#         'USER': os.getenv('POSTGRES_USER'),
#         'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
#         'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
#         'PORT': os.getenv('POSTGRES_PORT'),
#     }
# }

DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
    )
}

DATABASES['default']['ENGINE'] = 'django_prometheus.db.backends.postgresql'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "monitor.CustomUser"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

# Ensure static files are collected to this directory in prod
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Recommended for caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT Authorization header',
        }
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        # Write only to console since cloudwatch can capture stdout
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': str(BASE_DIR / 'monitor.log'),
        #     'formatter': 'verbose',
        #     'encoding': 'utf-8',
        # },
    },
    'loggers': {
        'monitor': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")  # or your Redis instance
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_DEFAULT_QUEUE = 'uptimemonitor'
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

ENV = os.getenv('ENVIRONMENT', 'dev')

if ENV == "prod":

    EMAIL_BACKEND = 'django_ses.SESBackend'
    AWS_SES_REGION_NAME = 'us-east-1'
    AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'
    USE_SES_V2 = True  # Use newer API

    # Email addresses
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'alerts@alivechecks.com')
    NOREPLY_EMAIL = os.getenv('NOREPLY_EMAIL', 'noreply@alivechecks.com')
    SUPPORT_EMAIL = os.getenv('SUPPORT_EMAIL', 'support@alivechecks.com')
    AWS_SES_CONFIGURATION_SET = 'prod-alivechecks'

    # Add retry configuration
    AWS_SES_BOTO3_CONFIG = botocore.config.Config(
        retries={
            'max_attempts': 3,
            'mode': 'adaptive'
        },
        connect_timeout=5,
        read_timeout=5,
    )
else:
    # EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    # EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    # EMAIL_PORT = 587
    # EMAIL_USE_TLS = False
    # EMAIL_USE_SSL = True
    # EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    # EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'alerts@alivechecks.com')
    NOREPLY_EMAIL = os.getenv('NOREPLY_EMAIL', 'noreply@alivechecks.com')

# Redis Config for rate limiting
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Frontend URL
FRONTEND_BASE_URL = os.getenv('FRONTEND_BASE_URL', 'http://localhost:3000')

SWAGGER_USE_COMPAT_RENDERERS = False

# Tell Django to trust ALB's HTTPS headers
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Use forwarded host and port from the ALB
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True


CELERY_BEAT_SCHEDULE = {
    # Uptime monitoring
    'check-due-websites-every-minute': {
        'task': 'monitor.tasks.check_due_websites',
        'schedule': crontab(),
    },
    'cleanup-uptime-logs-daily': {
        'task': 'monitor.tasks.cleanup_old_logs',
        'schedule': crontab(hour=2, minute=0),
        'args': (90,),
    },
    'check-heartbeats-every-minute': {
        'task': 'monitor.tasks.check_due_heartbeats',
        'schedule': crontab(),
    },

    # Metrics collection
    'collect-business-metrics': {
        'task': 'monitor.tasks.collect_business_metrics',
        'schedule': crontab(minute='*/2'),
    },
    'collect-uptime-percentages': {
        'task': 'monitor.tasks.collect_uptime_percentages',
        'schedule': crontab(minute='*/5'),
    },
    'collect-heartbeat-metrics': {
        'task': 'monitor.tasks.collect_heartbeat_metrics',
        'schedule': crontab(minute='*/1'),
    },
    'collect-celery-queue-metrics': {
        'task': 'monitor.tasks.collect_celery_queue_metrics',
        'schedule': 30.0,  # every 30 seconds
    },
    'collect-database-metrics': {
        'task': 'monitor.tasks.collect_database_metrics',
        'schedule': crontab(minute='*/2'),
    },
}
