name: Uptime Monitor CI/CD

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'CHANGELOG.md'
      - 'RUNBOOK.md'
      - 'ARCHITECTURE.md'
      - 'DEPLOYMENT.md'
      - 'CONTRIBUTING.md'
      - 'SECURITY.md'
      
env:
  PROJECT_NAME: "uptime-monitor"
  AWS_REGION: "us-east-1"

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:mypassword@localhost:5432/test_db
      SECRET_KEY: test-secret
      DEBUG: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Linter
        run: flake8 .

      - name: Run Tests
        run: pytest -v

  docker-build-push:
    name: Docker Build & Push
    needs: lint-test
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # Build, tag, and push Docker image
      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v9n7w5d9  # ðŸ‘ˆ your public ECR alias
          REPOSITORY: uptimemonitor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image for $ENVIRONMENT..."
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ env.ENVIRONMENT }}-latest
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:${{ env.ENVIRONMENT }}-latest

  terraform-deploy:
    name: Terraform Deploy
    needs: docker-build-push
    runs-on: ubuntu-latest
    outputs:
      database_url: ${{ steps.tf_outputs.outputs.database_url }}

    # ðŸ‘‡ Automatically sets environment name and URL based on branch
    # TODO: Update URLs to match my app
    environment:
      name: ${{ github.ref_name }}
      url: ${{ github.ref_name == 'main' && 'https://myapp.example.com' || 'https://staging-myapp.example.com' }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
      
      - name: Determine Environment Folder
        id: env_select
        run: |
          if [ "${GITHUB_REF_NAME}" == "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "tf_dir=tf-infra/prod" >> $GITHUB_OUTPUT
            echo "tfvars_file=prod.tfvars" >> $GITHUB_OUTPUT
            echo "db_username=${{ secrets.PROD_DB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "db_password=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_OUTPUT
            echo "ecr_repo_url=${{ secrets.PROD_ECR_REPO_URL }}" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "tf_dir=tf-infra/staging" >> $GITHUB_OUTPUT
            echo "tfvars_file=dev.tfvars" >> $GITHUB_OUTPUT
            echo "db_username=${{ secrets.STAGING_DB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "db_password=${{ secrets.STAGING_DB_PASSWORD }}" >> $GITHUB_OUTPUT
            echo "ecr_repo_url=${{ secrets.STAGING_ECR_REPO_URL }}" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform in ${{ steps.env_select.outputs.tf_dir }} ..."
          terraform -chdir=${{ steps.env_select.outputs.tf_dir }} init -input=false

      - name: Terraform Plan
        run: |
          echo "Running Terraform plan for ${{ steps.env_select.outputs.env }}..."
          terraform -chdir=${{ steps.env_select.outputs.tf_dir }} plan \
            -var-file=${{ steps.env_select.outputs.tfvars_file }} \
            -var "db_username=${{ steps.env_select.outputs.db_username }}" \
            -var "db_password=${{ steps.env_select.outputs.db_password }}" \
            -var "ecr_repo_url=${{ steps.env_select.outputs.ecr_repo_url }}" \
            -var "image_tag=${{ steps.env_select.outputs.image_tag }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          echo "Applying Terraform for ${{ steps.env_select.outputs.env }}..."
          terraform -chdir=${{ steps.env_select.outputs.tf_dir }} apply -auto-approve tfplan

      - name: Get Terraform outputs
        id: tf_outputs
        run: |
          DATABASE_URL=$(terraform -chdir=${{ steps.env_select.outputs.tf_dir }} output -raw database_url)
          echo "::add-mask::$DATABASE_URL"
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT




  django-migrate:
    name: Django Migrations
    needs: terraform-deploy
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ needs.terraform-deploy.outputs.database_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Django Migrations
        run: |
          echo "Running migrations..."
          python manage.py migrate
