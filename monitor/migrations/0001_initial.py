# Generated by Django 5.2.4 on 2025-09-23 21:44

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=50)),
                ("last_name", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HeartBeat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "key",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "interval",
                    models.IntegerField(
                        help_text="Expected interval in seconds (e.g. 86400 for daily)"
                    ),
                ),
                (
                    "grace_period",
                    models.IntegerField(
                        default=60, help_text="Extra time buffer in seconds"
                    ),
                ),
                (
                    "last_ping",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "next_due",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown"),
                            ("up", "Up"),
                            ("down", "Down"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="heartbeats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Website",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("url", models.URLField()),
                (
                    "check_interval",
                    models.IntegerField(
                        choices=[
                            (1, "1 minute"),
                            (5, "5 minutes"),
                            (10, "10 minutes"),
                            (15, "15 minutes"),
                            (30, "30 minutes"),
                            (60, "1 hour"),
                        ],
                        default=5,
                        help_text="How often (in minutes) to check the website.",
                    ),
                ),
                ("expected_status", models.IntegerField(default=200)),
                (
                    "timeout_ms",
                    models.IntegerField(
                        default=5000,
                        help_text="Maximum wait time (in milliseconds) for the request to respond, before you give up and mark it as failed.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("next_check_at", models.DateTimeField(blank=True, null=True)),
                ("is_down", models.BooleanField(default=False)),
                ("last_downtime_at", models.DateTimeField(blank=True, null=True)),
                ("last_recovered_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="websites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UptimeCheckResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status_code", models.IntegerField()),
                ("error_message", models.TextField(blank=True)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
                ("response_time_ms", models.FloatField()),
                ("checked_at", models.DateTimeField(auto_now_add=True)),
                (
                    "website",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checks",
                        to="monitor.website",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "alert_type",
                    models.CharField(
                        choices=[("downtime", "Downtime"), ("recovery", "Recovery")],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_sent_at", models.DateTimeField(blank=True, null=True)),
                ("retry_count", models.IntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id", "alert_type", "is_active"],
                        name="monitor_ale_content_74142e_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="monitor_ale_created_3af5b3_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("slack", "Slack"),
                            ("webhook", "Webhook"),
                            ("whatsapp", "WhatsApp"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                ("target", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "content_type", "object_id", "method")},
            },
        ),
        migrations.CreateModel(
            name="PingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("success", "Success"), ("fail", "Fail")],
                        max_length=20,
                    ),
                ),
                (
                    "runtime",
                    models.FloatField(
                        blank=True, help_text="Runtime in seconds", null=True
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=255)),
                (
                    "heartbeat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pings",
                        to="monitor.heartbeat",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["heartbeat", "timestamp"],
                        name="monitor_pin_heartbe_0bbebd_idx",
                    ),
                    models.Index(
                        fields=["status"], name="monitor_pin_status_ffa182_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="website",
            index=models.Index(fields=["user"], name="monitor_web_user_id_3a7772_idx"),
        ),
        migrations.AddIndex(
            model_name="website",
            index=models.Index(
                fields=["is_active", "next_check_at"],
                name="monitor_web_is_acti_89a791_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="website",
            index=models.Index(
                fields=["created_at"], name="monitor_web_created_990d1a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="uptimecheckresult",
            index=models.Index(
                fields=["website", "checked_at"], name="monitor_upt_website_b9fb9d_idx"
            ),
        ),
    ]
