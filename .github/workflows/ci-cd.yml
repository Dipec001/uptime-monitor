name: Uptime Monitor CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip   # Cache directory
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Database
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python manage.py migrate

      - name: Run Tests
        run: pytest -v

      - name: Run Linter
        run: flake8 .

  docker-build-push:
    name: Docker Build & Push
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker build -t ${{ env.PROJECT_NAME }}:$IMAGE_TAG .
          docker tag ${{ env.PROJECT_NAME }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}:$IMAGE_TAG
          docker tag ${{ env.PROJECT_NAME }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}:latest

      - name: Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}:latest

  terraform-deploy:
    name: Terraform Deploy
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Terraform Init
        run: terraform -chdir=terraform init -input=false

      - name: Terraform Plan
        run: |
          ENV_FILE="dev.tfvars"
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            ENV_FILE="prod.tfvars"
          fi
          terraform -chdir=terraform plan -var-file=$ENV_FILE -out=tfplan

      - name: Terraform Apply
        run: |
          ENV_FILE="dev.tfvars"
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            ENV_FILE="prod.tfvars"
          fi
          terraform -chdir=terraform apply -input=false tfplan

  django-migrate:
    name: Django Migrations
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Django Migrations
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            export DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
          else
            export DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
          fi
          python manage.py migrate

  notify-failure:
    name: Notify on Failure
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "ðŸš¨ CI/CD pipeline failed for ${{ github.repository }} branch ${{ github.ref }}",
              "channel": "#deployments"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
